import sensor, time, pyb, math
from serialtalk.auto import SerialTalk

# === SerialTalk Setup ===
st = SerialTalk()
cam_data = [0, 0, 0]  # Format: [mode, black_balance, [blue_balance, orange_balance]]
def cam(): return cam_data
st.add_command(cam, "repr")

# ======================================================
# WRO FUTURE ENGINEERS â€“ BLACK BALANCE MODULE (v2.0)
# ======================================================
# Purpose:
#   - Replaces traditional white balance with black pixel analysis for more consistency.
#   - Optionally reads blue and orange widths to assist corner detection.
#   - Sends all values over SerialTalk for robot decision-making.

# Techniques:
#   - Gamma + contrast boost to enhance dark/colored regions.
#   - Divides image into left/right ROIs.
#   - Measures and compares black, blue, and orange features.
#   - Applies lens correction for geometric accuracy.

# === Camera Initialization ===
sensor.reset()
sensor.set_pixformat(sensor.RGB565)          # Enable color mode
sensor.set_framesize(sensor.QVGA)            # Set resolution to 320x240
sensor.set_vflip(True)                       # Match world orientation
sensor.set_hmirror(True)                     # Align with robot perspective
sensor.set_auto_whitebal(False)              # Fix white balance for color consistency
sensor.set_auto_gain(False)                  # Prevent brightness variation
sensor.skip_frames(time=2000)                # Wait for settings to stabilize
clock = time.clock()

# === Utility: Calculate width span of multiple blobs ===
def merged_width(blobs):
    if not blobs: return 0
    x_min = min(b.x() for b in blobs)
    x_max = max(b.x() + b.w() for b in blobs)
    return x_max - x_min

# === Main Balance Checker ===
sensor.reset()#initialize sensor
sensor.set_pixformat(sensor.RGB565)#use color
sensor.set_framesize(sensor.QVGA)#320x240 resolution
sensor.set_vflip(True)#vertical flip to match world
sensor.set_hmirror(True)#horizontal mirror to align view
sensor.set_auto_whitebal(False)#disable auto white balance
sensor.set_auto_gain(False)#disable auto gain
sensor.skip_frames(time=2000)#wait for config to apply
clock=time.clock()
def check_color_balance(img,img_debug,ROI_Y,ROI_H):
    img_contrast=img.copy()
    img_contrast.gamma_corr(gamma=1.3,contrast=2.2)
    roi_left=(0,ROI_Y,img.width()//2,ROI_H)
    roi_right=(img.width()//2,ROI_Y,img.width()//2,ROI_H)
    BLACK_THRESH=(0, 93, -128, 0, -7, 36)
    Lblack_blobs=img_contrast.find_blobs([BLACK_THRESH],roi=roi_left,pixels_threshold=200)
    Rblack_blobs=img_contrast.find_blobs([BLACK_THRESH],roi=roi_right,pixels_threshold=200)
    Lblack_pixels=sum([b.pixels() for b in Lblack_blobs])
    Rblack_pixels=sum([b.pixels() for b in Rblack_blobs])
    BLUE_THRESH=(0, 100, -128, 127, -128, -11)
    Lblue_blobs=img_contrast.find_blobs([BLUE_THRESH],roi=roi_left)
    Rblue_blobs=img_contrast.find_blobs([BLUE_THRESH],roi=roi_right)
    Lblue_width=merged_width(Lblue_blobs)
    Rblue_width=merged_width(Rblue_blobs)
    ORANGE_THRESH=(0, 100, -2, 127, 37, 127)
    Lorange_blobs=img_contrast.find_blobs([ORANGE_THRESH],roi=roi_left)
    Rorange_blobs=img_contrast.find_blobs([ORANGE_THRESH],roi=roi_right)
    Lorange_width=merged_width(Lorange_blobs)
    Rorange_width=merged_width(Rorange_blobs)
    if True:
        img_debug.draw_rectangle(roi_left,color=(255,0,0))#draw red box on left
        img_debug.draw_rectangle(roi_right,color=(0,0,255))#draw blue box on right
        for blob in Lblack_blobs:
            img_debug.draw_rectangle(blob.rect(),color=(0,255,0))
        for blob in Rblack_blobs:
            img_debug.draw_rectangle(blob.rect(),color=(0,255,0))
    blue_balance=Rblue_width-Lblue_width
    orange_balance=Lorange_width-Rorange_width
    black_balance=max(-1100,min(1100,(Lblack_pixels-Rblack_pixels)/8))
    print("balance",int(black_balance),blue_balance,orange_balance)
    return {"1":int(black_balance),"2":[blue_balance,orange_balance]}
while True:
    clock.tick()
    img_debug=sensor.snapshot()#capture raw image
    img_debug=img_debug.lens_corr(strength=1.53,x_corr=-0.04)#correct lens distortion
    #img_debug.gamma_corr(gamma=1.3,contrast=2.2)
    img=img_debug.copy()#clean image for blob processing
    color_balance=check_color_balance(img,img_debug,85,155)
    
    cam_data=[1,color_balance["1"],color_balance["2"]]
    #blue_balance=cam_data[2][0]
    #orange_balance=cam_data[2][1]
    #print("blue",blue_balance)
    #print("orange",orange_balance)
    print(cam_data)
    st.process()


























#img_debug=img_debug.lens_corr(strength=1.6,x_corr=-0.025,y_corr=-0.15)#correct lens distortion
#img_debug=img_debug.crop(x_scale=1.151,y_scale=1.159,roi=(21,33,278,207))#crop usable undistorted regio
#print("white_balance",color_balance)#debug if needed
#print("black",Lblack_pixels,Rblack_pixels,Lblack_pixels-Rblack_pixels,black_balance)
#print("blue",left_blue_pixels,right_blue_pixels,blue_balance)
#def check_blue_balance():
    #aaa
    #WHITE_THRESH=(90, 100, -128, 127, -128, 127)
    #BLACK_THRESH=(0, 93, -128, 0, -7, 36)
    #left_white_blobs=img_contrast.find_blobs([WHITE_THRESH],roi=roi_left,pixels_threshold=5,area_threshold=5)
    #right_white_blobs=img_contrast.find_blobs([WHITE_THRESH],roi=roi_right,pixels_threshold=5,area_threshold=5)
    #left_height=max((blob.h() for blob in left_black_blobs),default=0)
    #right_height=max((blob.h() for blob in right_black_blobs),default=0)
    #lowest_left_y = min(left_white_blobs, key=lambda b: b.y()).y()
    #lowest_right_y = min(right_white_blobs, key=lambda b: b.y()).y()
    #img_debug.draw_line((0, lowest_left_y, img.width(), lowest_left_y), color=(255, 0, 0))
    #.draw_line((0, lowest_right_y, img.width(), lowest_right_y), color=(255, 0, 255))
# Red line at y
#if len(left_black_blobs)==1 and len(right_black_blobs)==1:
    #left_blob =left_black_blobs[0]
    #right_blob=right_black_blobs[0]
    #if   left_blob.h()>right_blob.h()+10:RAW_balance=abs(RAW_balance)#Left blob is taller
    #elif right_blob.h()>left_blob.h()+10:RAW_balance=-abs(RAW_balance)#Right blob is taller
    #else:print("Both blobs have equal height")
#balance=math.copysign(abs(RAW_balance)/1,RAW_balance)